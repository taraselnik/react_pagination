{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","numberOfPages","Math","ceil","getArrayPages","isLastPage","isFirstPage","goDirection","direction","className","classNames","disabled","href","onClick","map","page","active","items","length","options","App","useState","setPerpage","setCurrentPage","itemsCount","slice","id","value","onChange","event","Number","target","option","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"2MAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,WCKIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAgBC,KAAKC,KAAKN,EAAQC,GAClCM,EAAgBd,EAAW,EAAGW,GAC9BI,EAAaN,IAAgBE,EAC7BK,EAA8B,IAAhBP,EACdQ,EAAc,SAACC,GACD,SAAdA,GACFR,EAAaD,EAAc,GAGX,SAAdS,GACFR,EAAaD,EAAc,IAI/B,OACE,qBAAIU,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEC,SAAUL,IAFd,SAKE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAI,WAAMb,GACV,gBAAeO,EACfO,QAAS,kBACNP,GAAeC,EAAY,SANhC,oBAYDH,EAAcU,KAAI,SAAAC,GAAI,OACrB,oBAEEN,UAAWC,IACT,YACA,CAAEM,OAAQD,IAAShB,IAJvB,SAOE,mBACE,UAAQ,WACRU,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMb,EAAae,IAJ9B,SAMGA,KAZEA,MAiBT,oBAAIN,UAAWC,IACb,YACA,CAAEC,SAAUN,IAFd,SAKE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAI,WAAMb,GACV,gBAAeM,EACfQ,QAAS,kBACNR,GAAcE,EAAY,SAN/B,wBCrEFU,EAAQ3B,EAAW,EAAG,IACzBwB,KAAI,SAAApB,GAAC,qBAAYA,MAEdG,EAAQoB,EAAMC,OAEdC,EAAU,CAAC,EAAG,EAAG,GAAI,IAEdC,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOvB,EAAP,KAAgBwB,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOtB,EAAP,KAAoBwB,EAApB,KAEMhC,GAAQQ,EAAc,GAAKD,EAC3BN,EAAKO,EAAcD,EAAUD,EAC/BA,EACAE,EAAcD,EACZ0B,EAAaP,EAAMQ,MAAMlC,EAAMC,GAErC,OACE,sBAAKiB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWV,EADX,mBACiCR,EAAO,EADxC,cAC+CC,EAD/C,eACwDyB,EAAMC,OAD9D,OAIA,sBAAKT,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRiB,GAAG,kBACHjB,UAAU,eACVkB,MAAO7B,EACP8B,SAAU,SAAAC,GACRP,EAAWQ,OAAOD,EAAME,OAAOJ,QAC/BJ,EAAe,IAPnB,SAUGJ,EAAQL,KAAI,SAAAkB,GAAM,OACjB,wBACEL,MAAOK,EADT,SAIGA,GAFIA,UASb,uBAAOC,QAAQ,kBAAkBxB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEZ,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aAAcuB,IAGhB,6BACGC,EAAWV,KAAI,SAAAoB,GAAI,OAAK,oBAAe,UAAQ,OAAvB,mBAAkCA,IAAzBA,YCjE1CC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b59c8e1d.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number\n  perPage: number\n  currentPage: number\n  onPageChange: (page: number) => void\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const numberOfPages = Math.ceil(total / perPage);\n  const getArrayPages = getNumbers(1, numberOfPages);\n  const isLastPage = currentPage === numberOfPages;\n  const isFirstPage = currentPage === 1;\n  const goDirection = (direction: string) => {\n    if (direction === 'prev') {\n      onPageChange(currentPage - 1);\n    }\n\n    if (direction === 'next') {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames(\n        'page-item',\n        { disabled: isFirstPage },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href={`#${currentPage}`}\n          aria-disabled={isFirstPage}\n          onClick={() => (\n            !isFirstPage && goDirection('prev'))}\n        >\n          «\n        </a>\n      </li>\n\n      {getArrayPages.map(page => (\n        <li\n          key={page}\n          className={classNames(\n            'page-item',\n            { active: page === currentPage },\n          )}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li className={classNames(\n        'page-item',\n        { disabled: isLastPage },\n      )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href={`#${currentPage}`}\n          aria-disabled={isLastPage}\n          onClick={() => (\n            !isLastPage && goDirection('next'))}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nconst total = items.length;\n\nconst options = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [perPage, setPerpage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const from = (currentPage - 1) * perPage;\n  const to = currentPage * perPage > total\n    ? total\n    : currentPage * perPage;\n  const itemsCount = items.slice(from, to);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${from + 1} - ${to} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={event => {\n              setPerpage(Number(event.target.value));\n              setCurrentPage(1);\n            }}\n          >\n            {options.map(option => (\n              <option\n                value={option}\n                key={option}\n              >\n                {option}\n              </option>\n            ))}\n\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total} // total number of items to paginate\n        perPage={perPage} // number of items per page\n        currentPage={currentPage} /* optional with 1 by default */\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {itemsCount.map(item => (<li key={item} data-cy=\"item\">{`${item}`}</li>))}\n\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}